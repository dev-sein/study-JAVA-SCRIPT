//자바스크립트는 함수형 프로그래밍이다. 프로그램이 돌아가기 위해서는 함수로 되어 있음. 함수 하나가 어플리케이션이라 말할 정도로 함수에 대한 중요도가 크다.

학습목표: 함수를 적절한 목적에 맞춰 구조를 변형시킬 수 있다.


함수: 코드의 재사용을 위한 목적으로 사용된다.
	인자(파라미터, parameter, variable): 매개변수(선언부)
	인수(아규먼트, argument, value): 매개변수에 들어가는 값(사용부, 호출부)
	//메소드의 매개변수는 파라미터, 실제로 사용될 때는 아규먼트임 

함수의 선언
	function 식별자(arg1, arg2, arg3, ...) {
		실행할 문장;
		return 리턴 값;
	}
	//  변수, 객체, 함수의 이름(identifier) (JS에서는 이름을 식별자로 사용해야 함)
	
* typeScript : 정적바인딩처럼 사용. 어떤 type을 넣어야할지 모르기 때문에 중간에 필터를 거쳐서 만들어줌

	- function : 함수 선언 표시한다
	- 식별자: 동사로 작성한다
	- parameter: 여러 개 있을 때에는 콤마로 분리하고 자료형을 따로 작성하지 않는다. 생략도 가능하다
	- return: 생략이 가능하다. 리턴타입은 따로 작성하지 않고, return을 만나면 함수는 즉시 종료된다

JS: 자바와 달리 JS는 매개변수의 개수를 맞추지 않아도 오류가 발생하지 않음. 만약 매개변수 개수가 맞지 않을 경우 UNDEFINED로 적용됨. 
JS에서는 같은 이름으로 선언하게 되면, 가장 최근에 선언된 함수가 적용된다. (오버로딩 지원X)
따라서, 배열로 받아야 한다. 가변인자를 사용해야 한다. 

typescript 설치
npm install typescript
npm install -g typescript
npm install -g ts-node @types/node
npx tsc
tsc --init

확장자를 변환 후 진행.
변수명 : 타입명
let result: number =  add(1,3);
 
    //마침표3걔: 가변인자(즉 배열) 무한히 받을 수 있음. 
    //그외 변수는 가변인자 앞에 적는다. 

any (마치 object처럼 모든 타입을 받을 수 있음.) 


수정 후 명령어:: 
tsc function.ts
node function.js


결과값 확인 명령어 : node 파일명.js

call back: 사용한 다음/ 돌려주기
js: 함수를 매개변수로 전달 가능, 함수를 값으로 취급하기 때문에, callback은 함수를 받아야 함. 

add(1,3, function(){})
1과 3의 결과값 : function(){}을 값으로 취급하는 것




[task01.html]

   <!-- 
        마우스를 올려보세요
        ----------------------------------------(hr)
        여기에 마우스를 올리면 배경색이 노란색으로 변합니다.

        ※ 배경색 변경은 노란색으로 하고, 초기 배경색은 흰색으로 한다.
        ※ 태그이름.style.background = '색이름';
     -->

[task02.html]

     <!-- 
        월화수목금토일
        ---------------------(hr)
        000은 출근

        사용자에게 요일을 입력받고 월~목은 출근, 다른 날은 휴일을 출력한다.
        요일은 "월", "화", ... 형식으로 입력받는다.
     -->

[task03.html]

    <!-- 
        분석 결과
        --------------------------(hr)
        통과!

        정확한 암호가 입력될 때까지 계속 prompt()를 사용하여 암호를 입력받는다.
        암호는 "호랑이"이다.

     -->

[task04.html]

    <!-- 
        pr("%", 5);
        결과 : %%%%%

        위의 결과가 나오는 함수를 선언하여 사용한다.
        출력은 콜백함수를 사용한다.
     -->

<콜백함수 실습>
// 상품명, 가격, 개수를 전달받은 뒤 전체 금액을 출력한다.
// 1. 상품명과 가격, 개수는 A함수에서 전달받는다. -> add 
// 2. B함수에서는 상품명과 전체 금액을 전달받아서 출력한다. average 
// 3. A함수는 B함수를 callback함수로 전달받는다. average(name, )

--------------------------------------------------------------
함수구조: 
//(function(){})() 선언과 동시에 사용 


전역 함수
	- eval()
		문자열 형태의 수식을 전달받아서 수식을 계산한다.
		ecal("2+3*6-7") == 13;

	- parseInt()
		문자열을 정수로 변환.
		paseInt("34") === 34
		
	- isNaN()
		값이 NaN이면 true
		NaN이 아니면 false
	
	- isFinite()
		값이 NaN이 아니면 true
		NaN이면 false

==============================================
	필드 대신 프로퍼티
	d.body (d의 프로퍼티) 

프로퍼티(객체, 변수, 함수 가능)
메소드 = 프로퍼티가 들어간 함수



객체
		객체의 고유한 속성을 프로퍼티(propery)라 부르며, 여러 프로퍼티와 값의 쌍으로 표현된다.
		객체가 호출하는 함수는 메소드라고 부른다.

	account = {name: '한동석', number: '110-11-1232142', password: '1234'}
	account.name
	account.number
	account.password
	account["name"]
	account["number"]
	account["password]
	account.age = 20; (수정 없으면 선언:: map 구조//key값이 없으면 선언, 있으면 수정)
	acoount.deposit = function(){...}
	account.deposit(); //반드시 메소드는 소괄호를 붙여써야 한다.


객체 선언 방법
1. 중괄호
2. object()
3. 프로토타입

제이슨은 키값 "" 
js는 키값 "" 아님 

JSON.stringify //제이슨 문자열화 시킴 

